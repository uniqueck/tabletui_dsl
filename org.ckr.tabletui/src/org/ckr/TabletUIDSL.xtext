grammar org.ckr.TabletUIDSL with org.eclipse.xtext.common.Terminals

generate tabletUIDSL "http://www.ckr.org/TabletUIDSL"

TabletUI:
	settings = Settings
	(elements += AbstractElement)*
;

Settings:
	'settings'
	'title' title = STRING
	('fhemweb_url' fhemweb_url = STRING)?
	'width' width = INT
	'height' height = INT 
	'columns' columns = INT
	'rows' rows = INT
	('debug' debug = BOOL)?
	'drag&drop' dragdrop = BOOL
	'gridster_margin' margin = INT
	(settings += SettingsElement)*
;


SettingsElement:
	CSS | Color
;

CSS:
	'css' path = STRING
	// (rules += CSSRule)?
;

//CSSRule:
//	'rule' name = ID
//		(rules += CSSRule)*
//		(
//			properties += PropertyDeclaration (';' declarations+=PropertyDeclaration)* (';')?
//		)?
//;
//
//PropertyDeclaration:
//	KnownPropertyDeclaration | UnrecognizedPropertyDeclaration
//	;
//
//KnownPropertyDeclaration:
//	name=KnownProperties ':' valuesLists=PropertyValuesLists
//;
//
//UnrecognizedPropertyDeclaration:
//	name=PropertyName ':' valuesLists=PropertyValuesLists
//;
//
//PropertyName:
//	IDENT | 'empty' | 'alpha'		// TODO  add other keywords here (possibly through generation)
//;
//	
//PropertyValuesLists:
//	lists+=PropertyValuesList (',' lists+=PropertyValuesList)*
//	;
//
//PropertyValuesList:
//	values+=PropertyValue+
//	;
//
//PropertyValue hidden(WS):
//	value= STRING important?='!important'?
//	;
//
//enum KnownProperties:
//	color | border_top='border-top' // | ..
//	;
//
//terminal IDENT: ID_START ID_PART* ;
//
//terminal fragment ID_PART: ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9') ;
//
//terminal fragment ID_START: PREFIXABLE_ID_START | '-';
//
//terminal fragment PREFIXABLE_ID_START: ('a'..'z'|'A'..'Z'|'_') ;

AbstractElement:
	Page | Template | Screensaver
;

BOOL: 
	'true' | 'false'
;
Page:
	name = ID '{'
	('screensaver' screensaver = [Screensaver])?
	(elements += Gridster)*
	'}'
;

Screensaver:
	'screensaver'
	'{'
		name = ID
		(widgets += WidgetDef)*		
	'}'
;

Template:
	name = ID 'template' '{'
		(elements += Div)*	
	'}'
;

Gridster:
	'{'
	('header' header = STRING)?
	'row' row = INT
	'column' column = INT
	('colspan' colspan = INT)?
	('rowspan' rowspan = INT)?
	('class' class = STRING)?
	('style' style = STRING)?
	(colors += Color)*
	(widgets += WidgetDef)*
	'}'
;

WidgetDef:
	Div | Widget
;

Widget:
	Switch | Button | Label | SimpleClock | Symbol | Calview | SimpleChart | Custom | Weather | Klimatrend | itunes_artwork | Image | Push | Volume | Select | TemplateRef | Swiper | Popup | Link | Clock
;

Clock:
	'clock'
	'{'
		'format' format = STRING
		'class' class = STRING
		('style' style = STRING)?
		('interval' interval = INT)?
		('days' days += STRING)?
		('shortday-length' shortdayLength = INT)?
		('months' month += STRING)?
		('shortmonth-length' monthLength = INT)?		
	'}'
;

Swiper:
	'swiper'
	'{'
		'width' width = STRING
		'height' height = STRING
		('autoplay' autoplay = INT)?
		('class' class = STRING)?
		(divs += Div)*
	'}'
;

TemplateRef:
	'template-ref' template += Template
;

Select:
	'select'
	'{'
		device = STRING
		('list' list = STRING)?
		('items' items = STRING)?
		('alias' alias = STRING)?
		('cmd' cmd = STRING)?
		('quote' quote = STRING)?		
		('get' get = STRING)?
		('set' set = STRING)?
		('class' class = STRING)?		
	'}'
;

Volume:
	'volume'
	'{'
		device = STRING
		('get' get = STRING)?
		'set' set = STRING
		('cmd' cmd = STRING)?
		('min' min = STRING)?
		('max' max = STRING)?
		('class' class = STRING)?		
	'}'
;

Push:
	'push'
	'{'
		(device = STRING)?
		('set' dataSet = STRING)?
		('set-on' setOn = STRING)?
		'icon' icon = STRING
		('background-icon' backgroundIcon = STRING)?
		('cmd' cmd = STRING)?
		('doubleClick' doubleClick = INT)?
		('countdown' countdown = STRING)?
		('class' class = STRING)?
		('url' url = STRING)?
	'}'
;

Image:
	'image' device = STRING
		'get' get = STRING
		'size' size = STRING
		('class' class = STRING)?
;

Switch:
	'switch'
	'{'
		device = STRING
		('get' get = STRING)?
		('getOn' getOn = STRING)?
		('setOn' setOn = STRING)?
		('getOff' getOff = STRING)?
		('class' class = STRING)?
		('onColor' onColor = [Color])?
		('offColor' offColor = [Color])?
		('background-on-color' onBackGroundColor = [Color])?	
		('background-icon' backgroundIcon = STRING)?
		('icon' icon = STRING)?	
	'}'
;

Custom:
	'custom'
	'{'
		code = STRING
	'}'
;



Div:
	'div' 
	'{'
		('class' class = STRING)?
		('style' style = STRING)?
		(widgets += WidgetDef)*
	'}'	
;

itunes_artwork:
	'itunes_artwork'
	'{'
		device = STRING
		'get' (get += STRING)*
		('opacity' opacity = STRING)?
		('size' size = STRING)?
		('class' class = STRING)?
		('style' style = STRING)?
	'}'
;

Weather:
	'weather'
	'{'
		device = STRING
		('get' get = STRING)?
		('class' class = STRING)?
		('imageset' imageset = WeatherImageSet)?
		('image-path' imagePath = STRING)?
	'}'
;

WeatherImageSet:
	'meteocons' | 'kleinklima' | 'reading'
;

Calview:
	'calview'
	'{'
		device = STRING
		'get' get = STRING
		'max' max = INT
		'class' class = STRING
		('all-forecast-color' allFC = [Color])?
		('all-today-color' allTC = [Color])?
	'}'		 
;


Popup:
	'popup'
	'{'
		('width' width = STRING)?
		('height' height = STRING)?
		'openIcon' openIcon = STRING
		('openBackgroundIcon' openBackgroundIcon = STRING)?
		('openClass' openClass = STRING)?
		('dialogClass' dialogClass = STRING)?
		('dialogHeaderClass' dialogHeaderClass = STRING)?
		('header' header = STRING)?
		(widgets += Widget)*		
	'}'
;

Link:
	'link'
	'{'
		('width' width = STRING)?
		('height' height = STRING)?
		('color' color = [Color])?
		('class' class = STRING)?
		('backgroundColor' backgroundColor = [Color])?
		'icon' icon = STRING
		'cmd' cmd = STRING
		'label' label = STRING		
	'}'
;

ButtonUrl:
	('url' url = STRING | 'page' page = [Page] | 'fhem-cmd' fhemCmd = STRING)
;

Button:
	'button' 
	'{'
		(device = STRING )?
		('get' get = STRING)?
		('getOn' getOn = STRING )?
		('getWarn' getWarn = STRING )?
		('getOff' getOff = STRING)?
		target = ButtonUrl
		'icon' icon = STRING
		('background-icon' backgroundIcon = STRING)?
		'class' class = STRING
		('on-color' onColor = [Color])?
		('on-background-color' onBackgroundColor = [Color])?
		('off-color' offColor = [Color])?
		('off-background-color' offBackgroundColor = [Color])?
	'}'		
;


Klimatrend:
	'klimatrend'
	'{'
		device = STRING
		'get' get = STRING
		('class' class = STRING)? 
		'refperiod' refperiod = INT
		('stagnatingColor' stagnatingColor = [Color])?
		('icon' icon = STRING)?
		('risingColor' risingColor = [Color])?
		('fallingColor' fallingColor = [Color])?
		('highmark' highmark = INT)?
		('highmarkIcon' highmarkIcon = STRING)?
		('highmarkRisingColor' highmarkRisingColor = [Color])?
		('highmarkFallingColor' highmarkFallingColor = [Color])?	
	'}'
;


Symbol: 
	'symbol' '{'
	device = STRING
	'get' get = STRING
	'getOn' (getOn += STRING)*
	('getWarn' getWarn = STRING)?
	('getOff' (getOff += STRING)*)?
	('class' class = STRING)?
	('background-icon' bgicon = STRING)?
	('off-color' offColor = [Color])?
	('icons' (icons += STRING)*)?
	('onColors' (onColors += [Color])*)?
	('onBackgroundColors' (onBackgroundColors += [Color])*)?
	'}'
;

SimpleClock:
	'SimpleClock'
	'{'
	(id = ID)?
	'date-format' dateFormat = STRING
	'time-format' timeFormat = STRING
	('date-color' dateColor = [Color])?
	('time-color' timeColor = [Color])?
	('class' class = STRING)?
	('style' style = STRING)?
	('bg-colors' bgColors += [Color])*
	'}'
;

SimpleChart:
	'simpleChart' 
	'{'
	device = STRING
	'log-config' log_device = STRING logfile = STRING
	'columnSpec' columnSpec = STRING
	'minValue' min = STRING
	'maxValue' max = STRING
	'xTicks' xTicks = INT
	'yTicks' yTicks = INT
	'daysago' daysago = INT	
	'class' class = STRING	
	'}'
;

Color:
	'color' name = ID rgb = STRING
;

Label:
	'label'
	 '{'
		device = STRING
		'get' get = STRING
		('class' class = STRING)?
		('style' style = STRING)?
		('unit' unit = STRING)?
		('part' part = STRING)?
		('substitution' substitution = STRING)?
	 '}'
;