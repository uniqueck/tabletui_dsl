/*
 * generated by Xtext
 */
package org.ckr.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.ckr.services.TabletUIDSLGrammarAccess;
import org.ckr.tabletUIDSL.Button;
import org.ckr.tabletUIDSL.CSS;
import org.ckr.tabletUIDSL.Calview;
import org.ckr.tabletUIDSL.Color;
import org.ckr.tabletUIDSL.Custom;
import org.ckr.tabletUIDSL.Div;
import org.ckr.tabletUIDSL.Gridster;
import org.ckr.tabletUIDSL.Label;
import org.ckr.tabletUIDSL.Page;
import org.ckr.tabletUIDSL.Settings;
import org.ckr.tabletUIDSL.SimpleChart;
import org.ckr.tabletUIDSL.SimpleClock;
import org.ckr.tabletUIDSL.Switch;
import org.ckr.tabletUIDSL.Symbol;
import org.ckr.tabletUIDSL.TabletUI;
import org.ckr.tabletUIDSL.TabletUIDSLPackage;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class TabletUIDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TabletUIDSLGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == TabletUIDSLPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case TabletUIDSLPackage.BUTTON:
				sequence_Button(context, (Button) semanticObject); 
				return; 
			case TabletUIDSLPackage.CSS:
				sequence_CSS(context, (CSS) semanticObject); 
				return; 
			case TabletUIDSLPackage.CALVIEW:
				sequence_Calview(context, (Calview) semanticObject); 
				return; 
			case TabletUIDSLPackage.COLOR:
				sequence_Color(context, (Color) semanticObject); 
				return; 
			case TabletUIDSLPackage.CUSTOM:
				sequence_Custom(context, (Custom) semanticObject); 
				return; 
			case TabletUIDSLPackage.DIV:
				sequence_Div(context, (Div) semanticObject); 
				return; 
			case TabletUIDSLPackage.GRIDSTER:
				sequence_Gridster(context, (Gridster) semanticObject); 
				return; 
			case TabletUIDSLPackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case TabletUIDSLPackage.PAGE:
				sequence_Page(context, (Page) semanticObject); 
				return; 
			case TabletUIDSLPackage.SETTINGS:
				sequence_Settings(context, (Settings) semanticObject); 
				return; 
			case TabletUIDSLPackage.SIMPLE_CHART:
				sequence_SimpleChart(context, (SimpleChart) semanticObject); 
				return; 
			case TabletUIDSLPackage.SIMPLE_CLOCK:
				sequence_SimpleClock(context, (SimpleClock) semanticObject); 
				return; 
			case TabletUIDSLPackage.SWITCH:
				sequence_Switch(context, (Switch) semanticObject); 
				return; 
			case TabletUIDSLPackage.SYMBOL:
				sequence_Symbol(context, (Symbol) semanticObject); 
				return; 
			case TabletUIDSLPackage.TABLET_UI:
				sequence_TabletUI(context, (TabletUI) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (url=[Page|ID]? icon=STRING class=STRING color=[Color|ID]? backgroundColor=[Color|ID]?)
	 */
	protected void sequence_Button(EObject context, Button semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     path=STRING
	 */
	protected void sequence_CSS(EObject context, CSS semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.CSS__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.CSS__PATH));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getCSSAccess().getPathSTRINGTerminalRuleCall_1_0(), semanticObject.getPath());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         device=STRING 
	 *         get=STRING 
	 *         max=INT 
	 *         class=STRING 
	 *         allFC=[Color|ID]? 
	 *         allTC=[Color|ID]?
	 *     )
	 */
	protected void sequence_Calview(EObject context, Calview semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID rgb=STRING)
	 */
	protected void sequence_Color(EObject context, Color semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.COLOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.COLOR__NAME));
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.COLOR__RGB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.COLOR__RGB));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getColorAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getColorAccess().getRgbSTRINGTerminalRuleCall_2_0(), semanticObject.getRgb());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     code=STRING
	 */
	protected void sequence_Custom(EObject context, Custom semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.CUSTOM__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.CUSTOM__CODE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getCustomAccess().getCodeSTRINGTerminalRuleCall_1_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (class=STRING widgets+=Widget*)
	 */
	protected void sequence_Div(EObject context, Div semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         header=STRING? 
	 *         row=INT 
	 *         column=INT 
	 *         colspan=INT? 
	 *         rowspan=INT? 
	 *         colors+=Color* 
	 *         widgets+=Widget*
	 *     )
	 */
	protected void sequence_Gridster(EObject context, Gridster semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (device=STRING get=STRING class=STRING)
	 */
	protected void sequence_Label(EObject context, Label semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.LABEL__DEVICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.LABEL__DEVICE));
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.LABEL__GET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.LABEL__GET));
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.LABEL__CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.LABEL__CLASS));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getLabelAccess().getDeviceSTRINGTerminalRuleCall_2_0(), semanticObject.getDevice());
		feeder.accept(grammarAccess.getLabelAccess().getGetSTRINGTerminalRuleCall_4_0(), semanticObject.getGet());
		feeder.accept(grammarAccess.getLabelAccess().getClassSTRINGTerminalRuleCall_6_0(), semanticObject.getClass_());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID elements+=Gridster*)
	 */
	protected void sequence_Page(EObject context, Page semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         title=STRING 
	 *         fhemweb_url=STRING? 
	 *         width=INT 
	 *         height=INT 
	 *         columns=INT 
	 *         rows=INT 
	 *         debug=BOOL? 
	 *         dragdrop=BOOL 
	 *         margin=INT 
	 *         settings+=SettingsElement*
	 *     )
	 */
	protected void sequence_Settings(EObject context, Settings semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         device=STRING 
	 *         log_device=STRING 
	 *         logfile=STRING 
	 *         columnSpec=STRING 
	 *         min=STRING 
	 *         max=STRING 
	 *         xTicks=INT 
	 *         yTicks=INT 
	 *         daysago=INT 
	 *         class=STRING
	 *     )
	 */
	protected void sequence_SimpleChart(EObject context, SimpleChart semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__DEVICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__DEVICE));
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__LOG_DEVICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__LOG_DEVICE));
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__LOGFILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__LOGFILE));
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__COLUMN_SPEC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__COLUMN_SPEC));
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__MIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__MIN));
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__MAX));
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__XTICKS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__XTICKS));
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__YTICKS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__YTICKS));
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__DAYSAGO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__DAYSAGO));
			if(transientValues.isValueTransient(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TabletUIDSLPackage.Literals.SIMPLE_CHART__CLASS));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getSimpleChartAccess().getDeviceSTRINGTerminalRuleCall_2_0(), semanticObject.getDevice());
		feeder.accept(grammarAccess.getSimpleChartAccess().getLog_deviceSTRINGTerminalRuleCall_4_0(), semanticObject.getLog_device());
		feeder.accept(grammarAccess.getSimpleChartAccess().getLogfileSTRINGTerminalRuleCall_5_0(), semanticObject.getLogfile());
		feeder.accept(grammarAccess.getSimpleChartAccess().getColumnSpecSTRINGTerminalRuleCall_7_0(), semanticObject.getColumnSpec());
		feeder.accept(grammarAccess.getSimpleChartAccess().getMinSTRINGTerminalRuleCall_9_0(), semanticObject.getMin());
		feeder.accept(grammarAccess.getSimpleChartAccess().getMaxSTRINGTerminalRuleCall_11_0(), semanticObject.getMax());
		feeder.accept(grammarAccess.getSimpleChartAccess().getXTicksINTTerminalRuleCall_13_0(), semanticObject.getXTicks());
		feeder.accept(grammarAccess.getSimpleChartAccess().getYTicksINTTerminalRuleCall_15_0(), semanticObject.getYTicks());
		feeder.accept(grammarAccess.getSimpleChartAccess().getDaysagoINTTerminalRuleCall_17_0(), semanticObject.getDaysago());
		feeder.accept(grammarAccess.getSimpleChartAccess().getClassSTRINGTerminalRuleCall_19_0(), semanticObject.getClass_());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         id=ID? 
	 *         dateFormat=STRING 
	 *         timeFormat=STRING 
	 *         dateColor=[Color|ID]? 
	 *         timeColor=[Color|ID]? 
	 *         class=STRING? 
	 *         style=STRING? 
	 *         bgColors+=[Color|ID]*
	 *     )
	 */
	protected void sequence_SimpleClock(EObject context, SimpleClock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         device=STRING 
	 *         get=STRING? 
	 *         getOn=STRING? 
	 *         getOff=STRING? 
	 *         class=STRING? 
	 *         onColor=[Color|ID]? 
	 *         offColor=[Color|ID]? 
	 *         onBackGroundColor=[Color|ID]? 
	 *         backgroundIcon=STRING? 
	 *         icon=STRING?
	 *     )
	 */
	protected void sequence_Switch(EObject context, Switch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         device=STRING 
	 *         get=STRING 
	 *         getOn+=STRING* 
	 *         getOff+=STRING* 
	 *         class=STRING? 
	 *         bgicon=STRING? 
	 *         onBackGroundColor=[Color|ID]? 
	 *         onColor=[Color|ID]? 
	 *         offColor=[Color|ID]? 
	 *         icons+=STRING* 
	 *         onColors+=[Color|ID]* 
	 *         onBackgroundColors+=[Color|ID]*
	 *     )
	 */
	protected void sequence_Symbol(EObject context, Symbol semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (settings=Settings elements+=AbstractElement*)
	 */
	protected void sequence_TabletUI(EObject context, TabletUI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
